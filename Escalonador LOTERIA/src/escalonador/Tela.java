/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package escalonador;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JOptionPane;
/**
 *
 * @author Luiz
 */
public class Tela extends javax.swing.JFrame {

    /**
     * Creates new form Tela
     */
    public Tela() {
        initComponents();
        
        priovisioff();
    }
    
    //declaração de variáveis locais.
    //p = tamanho do processo, v = valor da barra de progresso
    // contbilhete é flag contador da lógica da loteria
    //w = salva o tempo de espera dos processos
    int p1,p2,p3,v1,v2,v3,contbilhete,w1,w2,w3, lb =1;
    String log = "";
    float e1, e2, e3, media; //vai calcular o tempo de espera médio
    boolean flagpause = false; //flag que trava/destrava botões
    int delay = 250; //valor do intervalo do timer. Menor = mais rapido, expresso em milisegundos
    int[] aux = new int[4]; //auxiliar para lógica da loteria, aqui vai somar e determinar quantos bilhetes sorteados
    
    ArrayList<String> bilhetes = new ArrayList<> (); //arraylist com os "bilhetes"
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pbar_p1 = new javax.swing.JProgressBar();
        btn_iniciar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_p1 = new javax.swing.JTextField();
        txt_p3 = new javax.swing.JTextField();
        txt_p2 = new javax.swing.JTextField();
        pbar_p2 = new javax.swing.JProgressBar();
        pbar_p3 = new javax.swing.JProgressBar();
        txt_intervalo = new javax.swing.JTextField();
        btn_reset = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        lbl_w1 = new javax.swing.JLabel();
        lbl_w2 = new javax.swing.JLabel();
        lbl_w3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lbl_w4 = new javax.swing.JLabel();
        rbt_fcfs = new javax.swing.JRadioButton();
        rbt_loteria = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        txt_prio1 = new javax.swing.JTextField();
        lbl_p1 = new javax.swing.JLabel();
        txt_prio2 = new javax.swing.JTextField();
        lbl_p2 = new javax.swing.JLabel();
        txt_prio3 = new javax.swing.JTextField();
        lbl_p3 = new javax.swing.JLabel();
        btn_pausar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txta_log = new javax.swing.JTextArea();
        jLabel11 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Escalonador gráfico");

        btn_iniciar.setText("Iniciar");
        btn_iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_iniciarActionPerformed(evt);
            }
        });

        jLabel1.setText("Processo 1:");

        jLabel2.setText("Processo 2:");

        jLabel3.setText("Processo 3:");

        txt_p1.setText("10");

        txt_p3.setText("10");

        txt_p2.setText("10");

        txt_intervalo.setText("250");

        btn_reset.setText("Reset");
        btn_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_resetActionPerformed(evt);
            }
        });

        jLabel4.setText("Velocidade");

        lbl_w1.setText("0");

        lbl_w2.setText("0");

        lbl_w3.setText("0");

        jLabel5.setText("Tempo total do Processo");

        jLabel6.setText("Execução do processo");

        jLabel8.setText("Tempo de Espera");

        jLabel9.setText("Média do tempo de Espera:");

        lbl_w4.setText("0.0");

        rbt_fcfs.setSelected(true);
        rbt_fcfs.setText("FCFS");
        rbt_fcfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbt_fcfsActionPerformed(evt);
            }
        });

        rbt_loteria.setText("LOTERIA");
        rbt_loteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbt_loteriaActionPerformed(evt);
            }
        });

        jLabel10.setText("Algoritmo de Escalonamento:");

        txt_prio1.setText("1");

        lbl_p1.setText("Bilhete(s) P1");

        txt_prio2.setText("1");

        lbl_p2.setText("Bilhete(s) P2");

        txt_prio3.setText("1");

        lbl_p3.setText("Bilhete(s) P3");

        btn_pausar.setText("Pausar");
        btn_pausar.setEnabled(false);
        btn_pausar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_pausarActionPerformed(evt);
            }
        });

        txta_log.setEditable(false);
        txta_log.setColumns(20);
        txta_log.setRows(5);
        jScrollPane1.setViewportView(txta_log);

        jLabel11.setText("Bilhetes sorteados");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txt_p2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(pbar_p2, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(26, 26, 26)
                            .addComponent(lbl_w2))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel10)
                            .addGap(43, 43, 43)
                            .addComponent(rbt_fcfs)
                            .addGap(18, 18, 18)
                            .addComponent(rbt_loteria))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lbl_p1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txt_prio1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(lbl_p2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txt_prio2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(lbl_p3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txt_prio3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4)
                            .addGap(17, 17, 17)
                            .addComponent(txt_intervalo, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(btn_iniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btn_pausar, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(13, 13, 13)
                            .addComponent(btn_reset))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txt_p1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(pbar_p1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(26, 26, 26)
                            .addComponent(lbl_w1))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txt_p3, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(pbar_p3, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(26, 26, 26)
                            .addComponent(lbl_w3))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(jLabel9)
                            .addGap(18, 18, 18)
                            .addComponent(lbl_w4)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(113, 113, 113)
                        .addComponent(jLabel6)
                        .addGap(113, 113, 113)
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel11)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8)
                            .addComponent(jLabel11)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pbar_p1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_p1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1))
                    .addComponent(lbl_w1))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(lbl_w2)
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(txt_p2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(pbar_p2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_p3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3))
                    .addComponent(lbl_w3)
                    .addComponent(pbar_p3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(lbl_w4))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbt_fcfs)
                    .addComponent(rbt_loteria)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_prio3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_p3))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_prio2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_p2))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txt_prio1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lbl_p1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txt_intervalo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_iniciar)
                    .addComponent(btn_reset)
                    .addComponent(btn_pausar))
                .addGap(91, 91, 91))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_resetActionPerformed
        T.stop();
        reset();
        unlock();
        gerarBilhetes();
    }//GEN-LAST:event_btn_resetActionPerformed

    private void rbt_loteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbt_loteriaActionPerformed
        //lógica para auto selecionar e sumir com elementos com base no radio button selecionado
        rbt_fcfs.setSelected(false);
        rbt_loteria.setSelected(true);
        priovision();
    }//GEN-LAST:event_rbt_loteriaActionPerformed

    private void rbt_fcfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbt_fcfsActionPerformed
        rbt_loteria.setSelected(false);
        rbt_fcfs.setSelected(true);
        priovisioff();
    }//GEN-LAST:event_rbt_fcfsActionPerformed

    private void btn_iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_iniciarActionPerformed
        start();
        gerarBilhetes();
        
        
    }//GEN-LAST:event_btn_iniciarActionPerformed

    private void btn_pausarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_pausarActionPerformed
        if (flagpause == false) {
            T.stop();
            btn_pausar.setText("Continuar");
            flagpause = true;
        }
        else {
            T.start();
            btn_pausar.setText("Parar");
            flagpause = false;
        }
        
        
    }//GEN-LAST:event_btn_pausarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tela.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tela().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_iniciar;
    private javax.swing.JButton btn_pausar;
    private javax.swing.JButton btn_reset;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbl_p1;
    private javax.swing.JLabel lbl_p2;
    private javax.swing.JLabel lbl_p3;
    private javax.swing.JLabel lbl_w1;
    private javax.swing.JLabel lbl_w2;
    private javax.swing.JLabel lbl_w3;
    private javax.swing.JLabel lbl_w4;
    private javax.swing.JProgressBar pbar_p1;
    private javax.swing.JProgressBar pbar_p2;
    private javax.swing.JProgressBar pbar_p3;
    private javax.swing.JRadioButton rbt_fcfs;
    private javax.swing.JRadioButton rbt_loteria;
    private javax.swing.JTextField txt_intervalo;
    private javax.swing.JTextField txt_p1;
    private javax.swing.JTextField txt_p2;
    private javax.swing.JTextField txt_p3;
    private javax.swing.JTextField txt_prio1;
    private javax.swing.JTextField txt_prio2;
    private javax.swing.JTextField txt_prio3;
    private javax.swing.JTextArea txta_log;
    // End of variables declaration//GEN-END:variables
    
    
    
    //ActionListener é um objeto de ação, que vai ser chamado a cada intervalo do timer
    
    ActionListener acao = new ActionListener(){
        public void actionPerformed(ActionEvent e) {
            
            //O método chamado no intervalo do timer depende da radio button selecionada (fcfs/loteria) 
            
            if(rbt_fcfs.isSelected()) {
                atualizarFcfs();
                
            }
            else {
            
            atualizarLoteria();
            
            }
        }
    };
    
    //Aqui começa a brincadeira. Declarando um objeto timer chamado T, os dois
    // parametros é o tempo de intervalo e a ação.
        
    Timer T = new Timer(delay, acao);
    
    public void gerarBilhetes(){
        
        //Esse método vai popular o Array Bilhetes com a quantidade de bilhetes
        //escolhida para cada processo, e serão enfileirados em sequencia aleatória.
        
        
        
        bilhetes.clear();                        //Exclui todos os bilhetes anteriores.
        contbilhete = 0;                         //Zera o contador que atualiza as barras.
        aux[0] = 0;                              //Soma o valor total dos bilhetes.
        aux[1] = isNumeric(txt_prio1.getText()); //Recebe a quantidade de bilhetes do p1.
        aux[2] = isNumeric(txt_prio2.getText()); //Recebe a quantidade de bilhetes do p2
        aux[3] = isNumeric(txt_prio3.getText()); //Recebe a quantidade de bilhetes do p3
       
        /*Caso o valor da barra já esteja cheio, pula a população do bilhete do processo
         já finalizado. Caso o processo ainda não finalizou, vai popular com 
        bilhetes do processo específico até a quantidade escolhida para o mesmo. */
        
        if (v1 < p1) {                          
        //v1 = Valor atual do processo 1. p1 = Valor máximo do tempo do processo1.
            for (int i = 0; i < aux[1]; i++) {
                //Inicia o for, populando o array com bilhetes do Processo 1.
                bilhetes.add("p1");              //Gera um bilhete do Processo 1.
                
                aux[0]++;                        //incrementa a contagem de bilhetes totais.
                
            }
        }
        if (v2 < p2) {
            for (int i = 0; i < aux[2]; i++) {
                bilhetes.add("p2");
                
                aux[0]++;
                
            }
        }
        if (v3 < p3) {
            for (int i = 0; i < aux[3]; i++) {
                bilhetes.add("p3");
                
                aux[0]++;
                
            }
        }
        
        Collections.shuffle(bilhetes);          //O array é embaralhado 
        
        for (int i = 0; i < aux[0]; i++) {
            
            log = log+"Sorteio "+lb+", Bilhete: "+bilhetes.get(i)+"\n";
        }
        
//        if (rbt_loteria.isSelected() && T.isRunning()){
//            for (int i = 0; i < aux[0]; i++){
//                //Exibe os bilhetes sorteados no console
//                
//                System.out.println("Sorteio: "+lb+", Bilhete "+sb+" :"+bilhetes.get(i));
//                log = log+"Sorteio: "+lb+", Bilhete "+sb+" :"+bilhetes.get(i)+"\n";
                txta_log.setText(log);
//                sb++;
//                
//                
//        }
//        
//        }       
            lb++;
            bilhetes.add("fim");  //Posição para controle da lógica.
  }
    
    
        
        
        
        /*lógica da atualização Loteria:caso a posição do array (index é o contbilhete) for igual ao processo
        cai em outro if.
        esse if verifica se a barra ja completou, caso sim, vai avançar o contbilhete até
        um valor diferente do processo.
        e então, adiciona 1 para o v, que vai atualizar a barra do processo, 
        contbilhete acrescenta em 1, e o tempo de espera dos outros processos são acrescidos, caso
        a barra não esteja completa.
        
        */
    
     public void atualizarLoteria() {
        lock();                                 //trava os elementos da interface.
        T.setDelay(isNumeric(txt_intervalo.getText())); //Atualiza a velocidade.
        
        if (bilhetes.get(contbilhete).equals("p1")) {
        //Caso o bilhete atual equivale ao Processo 1
            
            if (v1 >= p1) {
            //Caso o processo já finalizou
                while (bilhetes.get(contbilhete).equals("p1")) {
                //Vai avançar o contador até achar um bilhete de outro processo    
                    contbilhete++;   
                }
            }
            else {
            //Caso o processo não finalizou    
                v1++;                  //Adiciona ao valur do Processo, alusão a
                                       //CPU executando um processo
                pbar_p1.setValue(v1);  //Atualiza a barra do Processo 1
                contbilhete++;         //Avança o contador
                w2++;                  //Incrementa o tempo de espera do Processo 2
                w3++;                  //Incrementa o tempo de espera do Processo 3
                
                if (v2 < p2) {lbl_w2.setText(""+w2);} //Atualiza o tempo de espera p2
                if (v3 < p3) {lbl_w3.setText(""+w3);} //Atualiza o tempo de espera p3
                
            }
        }
        
        else if (bilhetes.get(contbilhete).equals("p2")) {
            if (v2 >= p2) {
                while (bilhetes.get(contbilhete).equals("p2")) {
                    contbilhete++;   
                }
                
            }
            else {
                v2++;
                pbar_p2.setValue(v2);
                contbilhete++;
                w1++;
                w3++;
                if (v1 < p2) {lbl_w1.setText(""+w1);}
                if (v3 < p3) {lbl_w3.setText(""+w3);}
            }
        }
        
        else if (bilhetes.get(contbilhete).equals("p3")) {
            if (v3 >= p3) {
                while (bilhetes.get(contbilhete).equals("p3")) {
                    contbilhete++;    
                }
                
            }
            else {
                v3++;
                pbar_p3.setValue(v3);
                contbilhete++;
                w2++;
                w1++;
                if (v2 < p2) {lbl_w2.setText(""+w2);}
                if (v1 < p1) {lbl_w1.setText(""+w1);}
            }
        }
        
        //Se o contador chegar ao limite de bilhetes, vai gerar novos bilhetes para o Array
        
        if (contbilhete == aux[0]) {
            gerarBilhetes();
        }
        
        // Se as 3 barras completarem, para tudo, reseta, destrava os elementos e calcula a média.
        if (v1 >= p1 && v2 >= p2 && v3 >= p3) {
            
            lb = 1;
            T.stop();
            unlock();
            aux[0] = 0;
            aux[1] = 0;
            aux[2] = 0;
            aux[3] = 0;
            
            e1 = w1;
            e2 = w2;
            e3 = w3;
            media = (e1+ e2 + e3) / 3;
            lbl_w4.setText(""+media);
        }
       
        
    }
    
    public void atualizarFcfs() {
        
        //Esse código é do FCFS, eu fiz ele bem porco e to com vergonha de explicar ASDFLKADSF
        //pelo menos funciona kk
        
        lock();
        
        v1++;
        
        lbl_w1.setText("0");
        lbl_w2.setText("0");
        lbl_w3.setText("0");
        
        pbar_p1.setValue(v1);
        
        if(v1 > p1) {
            v2++;
            pbar_p2.setValue(v2);
        }
        
        if ((v2 > p2+1) && (v1 > p1+1)){
            v3++;
            pbar_p3.setValue(v3);
        }
        
        
        
        if (pbar_p2.getValue() == pbar_p2.getMaximum()) {
            lbl_w2.setText(""+p1);
        }
        if (pbar_p3.getValue() == pbar_p3.getMaximum()) {
            lbl_w3.setText(""+(p1+p2));
        }
        
        if (v1 >= p1 && v2 >= p2 && v3 >= p3) {
            unlock();
            T.stop();
            
            
            e2 = Float.parseFloat(lbl_w2.getText());
            e3 = Float.parseFloat(lbl_w3.getText());
            media = (e2 + e3) / 3;
            lbl_w4.setText(""+media);
        }
    
}
    
    public int isNumeric (String str){
        int n;
        try {
            n = Integer.parseInt(str);
            return n;
        }
        catch (Exception e) {
            return n = 1;
        }
    }
    
    public void lock () {
        
        //metodo pra desativar os elementos
//        txt_intervalo.setEnabled(false);
        txt_p1.setEnabled(false);
        txt_p2.setEnabled(false);
        txt_p3.setEnabled(false);
        rbt_fcfs.setEnabled(false);
        rbt_loteria.setEnabled(false);
        btn_iniciar.setEnabled(false);
        btn_pausar.setEnabled(true);
//        txt_prio1.setEnabled(false);
//        txt_prio2.setEnabled(false);
//        txt_prio3.setEnabled(false);
//        btn_reset.setEnabled(false);
    }
    
    public void unlock () {
        //reativa eles
//        btn_reset.setEnabled(true);
        btn_pausar.setEnabled(false);
//        txt_intervalo.setEnabled(true);
        txt_p1.setEnabled(true);
        txt_p2.setEnabled(true);
        txt_p3.setEnabled(true);
        rbt_fcfs.setEnabled(true);
        rbt_loteria.setEnabled(true);
        btn_iniciar.setEnabled(true);
//        txt_prio1.setEnabled(true);
//        txt_prio2.setEnabled(true);
//        txt_prio3.setEnabled(true);
    }
    
    public void reset () {
        //zera os valores das variaveis, campos e barras.
        T.stop();
        pbar_p1.setValue(0);
        pbar_p2.setValue(0);
        pbar_p3.setValue(0);
        lbl_w1.setText("0");
        lbl_w2.setText("0");
        lbl_w3.setText("0");
        v1 = 0;
        v2 = 0;
        v3 = 0;
        lbl_w4.setText("0.0");
        bilhetes.clear();
        contbilhete = 0;
        flagpause = false;
        btn_pausar.setText("Pausar");
        
        lb = 1;
        log = "";
        txta_log.removeAll();
    }
    
    public void start() {
        //método que inicializa o timer.
        //salva no p o valor do tempo maximo do processo
        p1 = isNumeric(txt_p1.getText());
        p2 = isNumeric(txt_p2.getText());
        p3 = isNumeric(txt_p3.getText());
        
        //salva no delay a velocidade do timer
        delay = Integer.parseInt(txt_intervalo.getText());
        //define o valor maximo da barra com base no tempo de cada processo
        pbar_p1.setMaximum(p1);
        pbar_p2.setMaximum(p2);
        pbar_p3.setMaximum(p3);
        //re-zera tudo por precaução
        v1 = 0;
        v2 = 0;
        v3 = 0;
        
        w1 = 0;
        w2 = 0;
        w3 = 0;
        
        txta_log.removeAll();
        
        pbar_p1.setValue(0);
        pbar_p2.setValue(0);
        pbar_p3.setValue(0);
        //altera o delay 
        T.setDelay(isNumeric(txt_intervalo.getText()));
        //inicia o timer
        T.start();
    }
    
    public void priovisioff () {
        //some com os elementos da loteria caso FCFS esteja selecionado
        lbl_p1.setVisible(false);
        lbl_p2.setVisible(false);
        lbl_p3.setVisible(false);
        txt_prio1.setVisible(false);
        txt_prio2.setVisible(false);
        txt_prio3.setVisible(false);
    }
    
    public void priovision () {
        
        lbl_p1.setVisible(true);
        lbl_p2.setVisible(true);
        lbl_p3.setVisible(true);
        txt_prio1.setVisible(true);
        txt_prio2.setVisible(true);
        txt_prio3.setVisible(true);
    }

}
    

